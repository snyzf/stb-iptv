{"version":3,"sources":["components/Navigation.tsx","components/QueryChannel.tsx","components/Video.tsx","components/Marker.tsx","Player.tsx","EditChannel.jsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StyleWrapper","styled","div","Title","List","ul","ChannelId","span","data","onChange","useState","item","setItem","onKeyUp","useEffect","document","addEventListener","map","d","key","url","className","id","onClick","name","Navigation","channels","StyledVideo","video","hls","Hls","enableWorker","channel","instRef","useRef","current","undefined","loadSource","attachMedia","on","Events","MANIFEST_PARSED","play","ref","StyledWrapper","No","Channel","props","setChannel","Fragment","QueryChannel","chl","Marker","Video","input","Button","button","value","setValue","rows","cols","target","JSON","stringify","style","display","n","split","k","console","log","App","path","exact","component","Player","Editor","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"soxBAGA,IAAMA,EAAeC,IAAOC,IAAV,KAcZC,EAAQF,IAAOC,IAAV,KAOLE,EAAOH,IAAOI,GAAV,KAuBJC,EAAYL,IAAOM,KAAV,KAgBA,cAA8B,IAA3BC,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,SAAoB,EAClBC,mBAAkB,IADA,mBACnCC,EADmC,KAC7BC,EAD6B,KAOpCC,EAAU,aAOhB,OALAC,qBAAU,WAER,OADAC,SAASC,iBAAiB,QAASH,GAC5B,eACN,IAGD,kBAACb,EAAD,KACE,kBAACG,EAAD,iCACA,kBAACC,EAAD,KACGI,EAAKS,KAAI,SAACC,GAAD,OACR,wBACEC,IAAKD,EAAEE,IACPC,UAAS,UAAKV,EAAKW,KAAOJ,EAAEI,GAAK,SAAW,IAC5CC,QAAS,kBApBH,SAACL,GACfN,EAAQM,GACRT,GAAYA,EAASS,GAkBEK,CAAQL,KAEvB,kBAACZ,EAAD,KAAYY,EAAEI,IACbJ,EAAEM,Y,QCpFA,cAAwB,IAArBf,EAAoB,EAApBA,SAChB,OAAO,kBAACgB,EAAD,CAAYjB,KAAMkB,EAAUjB,SAAUA,K,gLCD/C,IAAMkB,EAAc1B,IAAO2B,MAAV,KAQXC,EAAM,IAAIC,IAAI,CAAEC,cAAc,IAErB,cAAuB,IAApBC,EAAmB,EAAnBA,QACZC,EAAeC,mBAanB,OAXApB,qBAAU,WACR,GAAImB,EAAQE,cAA2BC,IAAhBJ,EAAQZ,IAAmB,CAChD,IAAIQ,EAAaK,EAAQE,QACzBN,EAAIQ,WAAWL,EAAQZ,KACvBS,EAAIS,YAAYV,GAChBC,EAAIU,GAAGT,IAAIU,OAAOC,iBAAiB,WACjCb,EAAMc,aAGT,CAACT,EAASD,EAAQZ,MAEd,kBAACO,EAAD,CAAagB,IAAKV,K,uWCzB3B,IAAMW,EAAgB3C,IAAOC,IAAV,KASb2C,EAAK5C,IAAOC,IAAV,KAGF4C,EAAU7C,IAAOC,IAAV,KAIE,WAAC6C,GAAgB,IAAD,EACRA,EAAMf,QAAnBV,EADqB,EACrBA,GAAIE,EADiB,EACjBA,KAEZ,OACE,kBAACoB,EAAD,KACE,kBAACC,EAAD,KAAKvB,GACL,kBAACwB,EAAD,KAAUtB,KCpBD,aAAO,IAAD,EACWd,mBAAS,IADpB,mBACZsB,EADY,KACHgB,EADG,KAOnB,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAD,CAAczC,SANM,SAAC0C,GACvBH,EAAWG,MAMT,kBAACC,EAAD,CAAQpB,QAASA,IACjB,kBAACqB,EAAD,CAAOrB,QAASA,M,4OCZR/B,IAAOqD,MAAV,KAAX,IAKMC,EAAStD,IAAOuD,OAAV,KAMG,aAAO,IAAD,EACO9C,qBADP,mBACZ+C,EADY,KACLC,EADK,KAanB,OACE,6BACE,6BACE,8BAAUlC,KAAK,OAAOmC,KAAK,KAAKC,KAAK,MAAMnD,SAbjC,SAAC,GAAD,IAAagD,EAAb,EAAGI,OAAUJ,MAAb,OAA2BC,EAASD,MAc9C,8BACEE,KAAK,KACLC,KAAK,MACLH,MAAOK,KAAKC,UAAUN,GACtBO,MAAO,CAAEC,QAASR,EAAQ,QAAU,WAIxC,kBAACF,EAAD,CAAQhC,QArBU,WACpB,IAAM2C,EAAIT,EACPU,MAAM,OACNlD,KAAI,SAAAC,GAAC,OAAIA,EAAEiD,MAAM,QACjBlD,KAAI,SAACC,EAAGkD,GAAJ,MAAW,CAAE9C,GAAI8C,EAAG5C,KAAMN,EAAE,GAAIE,IAAKF,EAAE,OAC9CwC,EAASQ,GACTG,QAAQC,IAAIJ,KAeV,YC1BSK,EATO,WACpB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWC,IACjC,kBAAC,IAAD,CAAOH,KAAK,UAAUE,UAAWE,MCGnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASpE,SAASqE,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b10416c7.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\n\nconst StyleWrapper = styled.div`\n  position: fixed;\n  left: 40px;\n  top: 40px;\n  bottom: 40px;\n  width: 280px;\n  font-size: 24px;\n  font-weight: 500;\n  background: rgba(0, 0, 0, 0.7);\n  z-index: 1;\n  box-shadow: 0 0 4px 0px #fff;\n  overflow: hidden;\n`;\n\nconst Title = styled.div`\n  color: #fff;\n  padding: 16px 20px;\n  border-bottom: 1px solid rgba(255, 255, 255, 0.6);\n  text-align: center;\n`;\n\nconst List = styled.ul`\n  margin: 0;\n  padding: 0;\n  list-style-type: none;\n  overflow-y: auto;\n  height: calc(100% - 66px);\n  color: #fff;\n\n  > li {\n    margin: 0;\n    padding: 16px 20px;\n    cursor: pointer;\n    text-align: center;\n    position: relative;\n\n    &.active,\n    &:focus {\n      background: #673ab7;\n      color: #fff;\n    }\n  }\n`;\n\nconst ChannelId = styled.span`\n  display: inline-flex;\n  width: 30px;\n  position: absolute;\n  left: 20px;\n  bottom: 0;\n  top: 0;\n  align-items: center;\n`;\n\ninterface channel {\n  id?: string;\n  name?: string;\n  url?: string;\n}\n\nexport default ({ data, onChange }: any) => {\n  const [item, setItem] = useState<channel>({});\n  const onClick = (d: channel) => {\n    setItem(d);\n    onChange && onChange(d);\n  };\n\n  const onKeyUp = () => {};\n\n  useEffect(() => {\n    document.addEventListener('keyup', onKeyUp);\n    return () => {};\n  }, []);\n\n  return (\n    <StyleWrapper>\n      <Title>全部频道</Title>\n      <List>\n        {data.map((d: channel) => (\n          <li\n            key={d.url}\n            className={`${item.id === d.id ? 'active' : ''}`}\n            onClick={() => onClick(d)}\n          >\n            <ChannelId>{d.id}</ChannelId>\n            {d.name}\n          </li>\n        ))}\n      </List>\n    </StyleWrapper>\n  );\n};\n","import React from 'react';\nimport Navigation from './Navigation';\nimport channels from '../channels.json';\n\nexport default ({ onChange }: any) => {\n  return <Navigation data={channels} onChange={onChange} />;\n};\n","import React, { useEffect, useRef } from 'react';\nimport Hls from 'hls.js';\nimport styled from 'styled-components';\n\nconst StyledVideo = styled.video`\n  display: block;\n  width: 100%;\n  height: 100%;\n  background: #000;\n  outline: 0;\n`;\n\nconst hls = new Hls({ enableWorker: false });\n\nexport default ({ channel }: any) => {\n  let instRef: any = useRef();\n\n  useEffect(() => {\n    if (instRef.current && channel.url !== undefined) {\n      var video: any = instRef.current;\n      hls.loadSource(channel.url);\n      hls.attachMedia(video);\n      hls.on(Hls.Events.MANIFEST_PARSED, function() {\n        video.play();\n      });\n    }\n  }, [instRef, channel.url]);\n\n  return <StyledVideo ref={instRef}></StyledVideo>;\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledWrapper = styled.div`\n  position: fixed;\n  right: 40px;\n  top: 40px;\n  width: 220px;\n  text-align: center;\n  color: #fff;\n`;\n\nconst No = styled.div`\n  font-size: 60px;\n`;\nconst Channel = styled.div`\n  font-size: 30px;\n`;\n\nexport default (props: any) => {\n  const { id, name } = props.channel;\n\n  return (\n    <StyledWrapper>\n      <No>{id}</No>\n      <Channel>{name}</Channel>\n    </StyledWrapper>\n  );\n};\n","import React, { useState } from 'react';\nimport QueryChannel from './components/QueryChannel';\nimport Video from './components/Video';\nimport Marker from './components/Marker';\n\nexport default () => {\n  const [channel, setChannel] = useState({});\n\n  const onChannelChange = (chl: any) => {\n    setChannel(chl);\n  };\n\n  return (\n    <React.Fragment>\n      <QueryChannel onChange={onChannelChange} />\n      <Marker channel={channel} />\n      <Video channel={channel} />\n    </React.Fragment>\n  );\n};\n","import React, { useState } from 'react';\n\nimport styled from 'styled-components';\n\nconst Input = styled.input`\n  height: 25px;\n  width: 600px;\n`;\n\nconst Button = styled.button`\n  background: #6200ee;\n  color: #fff;\n  font-size: 16px;\n`;\n\nexport default () => {\n  const [value, setValue] = useState();\n\n  const onClick = ({ target: { value } }) => setValue(value);\n  const onButtonClick = () => {\n    const n = value\n      .split(/\\n/g)\n      .map(d => d.split(','))\n      .map((d, k) => ({ id: k, name: d[0], url: d[1] }));\n    setValue(n);\n    console.log(n);\n  };\n\n  return (\n    <div>\n      <div>\n        <textarea name=\"name\" rows=\"20\" cols=\"100\" onChange={onClick} />\n        <textarea\n          rows=\"20\"\n          cols=\"100\"\n          value={JSON.stringify(value)}\n          style={{ display: value ? 'block' : 'none' }}\n        ></textarea>\n      </div>\n\n      <Button onClick={onButtonClick}>submit</Button>\n    </div>\n  );\n};\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Player from './Player';\nimport Editor from './EditChannel';\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <Route path=\"/\" exact component={Player} />\n      <Route path=\"/editor\" component={Editor} />\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}